// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Commerce struct {
	ID          string `json:"id"`
	Storekeeper *User  `json:"storekeeper"`
	Name        string `json:"name"`
}

type Login struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type NewCommerce struct {
	Name string `json:"name"`
}

type NewUser struct {
	Email     string  `json:"email"`
	Password  string  `json:"password"`
	FirstName *string `json:"firstName"`
	LastName  *string `json:"lastName"`
}

type User struct {
	ID        string     `json:"id"`
	CreatedAt *time.Time `json:"createdAt"`
	Email     string     `json:"email"`
	Role      string     `json:"role"`
	FirstName *string    `json:"firstName"`
	LastName  *string    `json:"lastName"`
}

type Role string

const (
	RoleAdmin       Role = "ADMIN"
	RoleStorekeeper Role = "STOREKEEPER"
	RoleUser        Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleStorekeeper,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleStorekeeper, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
