// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	graphql "github.com/99designs/gqlgen/graphql"
	mock "github.com/stretchr/testify/mock"

	model "chemin-du-local.bzh/graphql/graph/model"

	options "go.mongodb.org/mongo-driver/mongo/options"

	products "chemin-du-local.bzh/graphql/internal/products"
)

// ProductsService is an autogenerated mock type for the ProductsService type
type ProductsService struct {
	mock.Mock
}

// Create provides a mock function with given fields: commerceID, input
func (_m *ProductsService) Create(commerceID string, input model.NewProduct) (*products.Product, error) {
	ret := _m.Called(commerceID, input)

	var r0 *products.Product
	if rf, ok := ret.Get(0).(func(string, model.NewProduct) *products.Product); ok {
		r0 = rf(commerceID, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, model.NewProduct) error); ok {
		r1 = rf(commerceID, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *ProductsService) GetById(id string) (*products.Product, error) {
	ret := _m.Called(id)

	var r0 *products.Product
	if rf, ok := ret.Get(0).(func(string) *products.Product); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFiltered provides a mock function with given fields: filter, opts
func (_m *ProductsService) GetFiltered(filter interface{}, opts *options.FindOptions) ([]products.Product, error) {
	ret := _m.Called(filter, opts)

	var r0 []products.Product
	if rf, ok := ret.Get(0).(func(interface{}, *options.FindOptions) []products.Product); ok {
		r0 = rf(filter, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]products.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, *options.FindOptions) error); ok {
		r1 = rf(filter, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetForCommerce provides a mock function with given fields: commerceID
func (_m *ProductsService) GetForCommerce(commerceID string) ([]products.Product, error) {
	ret := _m.Called(commerceID)

	var r0 []products.Product
	if rf, ok := ret.Get(0).(func(string) []products.Product); ok {
		r0 = rf(commerceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]products.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(commerceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginated provides a mock function with given fields: commerceID, startValue, first, filters
func (_m *ProductsService) GetPaginated(commerceID string, startValue *string, first int, filters *model.ProductFilter) ([]products.Product, error) {
	ret := _m.Called(commerceID, startValue, first, filters)

	var r0 []products.Product
	if rf, ok := ret.Get(0).(func(string, *string, int, *model.ProductFilter) []products.Product); ok {
		r0 = rf(commerceID, startValue, first, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]products.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *string, int, *model.ProductFilter) error); ok {
		r1 = rf(commerceID, startValue, first, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: changes, image
func (_m *ProductsService) Update(changes *products.Product, image *graphql.Upload) error {
	ret := _m.Called(changes, image)

	var r0 error
	if rf, ok := ret.Get(0).(func(*products.Product, *graphql.Upload) error); ok {
		r0 = rf(changes, image)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewProductsService interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductsService creates a new instance of ProductsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductsService(t mockConstructorTestingTNewProductsService) *ProductsService {
	mock := &ProductsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
