// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	commands "chemin-du-local.bzh/graphql/internal/services/commands"
	mock "github.com/stretchr/testify/mock"

	model "chemin-du-local.bzh/graphql/graph/model"

	options "go.mongodb.org/mongo-driver/mongo/options"
)

// CommandsService is an autogenerated mock type for the CommandsService type
type CommandsService struct {
	mock.Mock
}

// Create provides a mock function with given fields: input
func (_m *CommandsService) Create(input model.NewCommand) (*commands.Command, error) {
	ret := _m.Called(input)

	var r0 *commands.Command
	if rf, ok := ret.Get(0).(func(model.NewCommand) *commands.Command); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commands.Command)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.NewCommand) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *CommandsService) GetAll() ([]commands.Command, error) {
	ret := _m.Called()

	var r0 []commands.Command
	if rf, ok := ret.Get(0).(func() []commands.Command); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]commands.Command)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *CommandsService) GetById(id string) (*commands.Command, error) {
	ret := _m.Called(id)

	var r0 *commands.Command
	if rf, ok := ret.Get(0).(func(string) *commands.Command); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commands.Command)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFiltered provides a mock function with given fields: filter, opts
func (_m *CommandsService) GetFiltered(filter interface{}, opts *options.FindOptions) ([]commands.Command, error) {
	ret := _m.Called(filter, opts)

	var r0 []commands.Command
	if rf, ok := ret.Get(0).(func(interface{}, *options.FindOptions) []commands.Command); ok {
		r0 = rf(filter, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]commands.Command)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, *options.FindOptions) error); ok {
		r1 = rf(filter, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginated provides a mock function with given fields: startValue, first, filter
func (_m *CommandsService) GetPaginated(startValue *string, first int, filter *model.CommandsFilter) ([]commands.Command, error) {
	ret := _m.Called(startValue, first, filter)

	var r0 []commands.Command
	if rf, ok := ret.Get(0).(func(*string, int, *model.CommandsFilter) []commands.Command); ok {
		r0 = rf(startValue, first, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]commands.Command)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*string, int, *model.CommandsFilter) error); ok {
		r1 = rf(startValue, first, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTheoricalStatus provides a mock function with given fields: commandID, commerceCommandsService
func (_m *CommandsService) GetTheoricalStatus(commandID string, commerceCommandsService commands.CommerceCommandsService) (*string, error) {
	ret := _m.Called(commandID, commerceCommandsService)

	var r0 *string
	if rf, ok := ret.Get(0).(func(string, commands.CommerceCommandsService) *string); ok {
		r0 = rf(commandID, commerceCommandsService)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, commands.CommerceCommandsService) error); ok {
		r1 = rf(commandID, commerceCommandsService)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: commandID
func (_m *CommandsService) GetUser(commandID string) (*model.User, error) {
	ret := _m.Called(commandID)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(commandID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(commandID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: changes
func (_m *CommandsService) Update(changes *commands.Command) error {
	ret := _m.Called(changes)

	var r0 error
	if rf, ok := ret.Get(0).(func(*commands.Command) error); ok {
		r0 = rf(changes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCommandsService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommandsService creates a new instance of CommandsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommandsService(t mockConstructorTestingTNewCommandsService) *CommandsService {
	mock := &CommandsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
