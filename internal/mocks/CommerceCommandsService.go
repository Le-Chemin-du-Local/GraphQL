// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	commands "chemin-du-local.bzh/graphql/internal/services/commands"
	mock "github.com/stretchr/testify/mock"

	model "chemin-du-local.bzh/graphql/graph/model"

	options "go.mongodb.org/mongo-driver/mongo/options"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// CommerceCommandsService is an autogenerated mock type for the CommerceCommandsService type
type CommerceCommandsService struct {
	mock.Mock
}

// Create provides a mock function with given fields: input, commandID
func (_m *CommerceCommandsService) Create(input model.NewCommerceCommand, commandID primitive.ObjectID) (*commands.CommerceCommand, error) {
	ret := _m.Called(input, commandID)

	var r0 *commands.CommerceCommand
	if rf, ok := ret.Get(0).(func(model.NewCommerceCommand, primitive.ObjectID) *commands.CommerceCommand); ok {
		r0 = rf(input, commandID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commands.CommerceCommand)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.NewCommerceCommand, primitive.ObjectID) error); ok {
		r1 = rf(input, commandID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *CommerceCommandsService) GetAll() ([]commands.CommerceCommand, error) {
	ret := _m.Called()

	var r0 []commands.CommerceCommand
	if rf, ok := ret.Get(0).(func() []commands.CommerceCommand); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]commands.CommerceCommand)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *CommerceCommandsService) GetById(id string) (*commands.CommerceCommand, error) {
	ret := _m.Called(id)

	var r0 *commands.CommerceCommand
	if rf, ok := ret.Get(0).(func(string) *commands.CommerceCommand); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commands.CommerceCommand)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommerce provides a mock function with given fields: commerceCommandID
func (_m *CommerceCommandsService) GetCommerce(commerceCommandID string) (*model.Commerce, error) {
	ret := _m.Called(commerceCommandID)

	var r0 *model.Commerce
	if rf, ok := ret.Get(0).(func(string) *model.Commerce); ok {
		r0 = rf(commerceCommandID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Commerce)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(commerceCommandID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFiltered provides a mock function with given fields: filter, opts
func (_m *CommerceCommandsService) GetFiltered(filter interface{}, opts *options.FindOptions) ([]commands.CommerceCommand, error) {
	ret := _m.Called(filter, opts)

	var r0 []commands.CommerceCommand
	if rf, ok := ret.Get(0).(func(interface{}, *options.FindOptions) []commands.CommerceCommand); ok {
		r0 = rf(filter, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]commands.CommerceCommand)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, *options.FindOptions) error); ok {
		r1 = rf(filter, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetForCommand provides a mock function with given fields: commandID
func (_m *CommerceCommandsService) GetForCommand(commandID string) ([]commands.CommerceCommand, error) {
	ret := _m.Called(commandID)

	var r0 []commands.CommerceCommand
	if rf, ok := ret.Get(0).(func(string) []commands.CommerceCommand); ok {
		r0 = rf(commandID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]commands.CommerceCommand)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(commandID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginated provides a mock function with given fields: startValue, first, filter
func (_m *CommerceCommandsService) GetPaginated(startValue *string, first int, filter *model.CommerceCommandsFilter) ([]commands.CommerceCommand, error) {
	ret := _m.Called(startValue, first, filter)

	var r0 []commands.CommerceCommand
	if rf, ok := ret.Get(0).(func(*string, int, *model.CommerceCommandsFilter) []commands.CommerceCommand); ok {
		r0 = rf(startValue, first, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]commands.CommerceCommand)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*string, int, *model.CommerceCommandsFilter) error); ok {
		r1 = rf(startValue, first, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: commerceCommandID
func (_m *CommerceCommandsService) GetUser(commerceCommandID string) (*model.User, error) {
	ret := _m.Called(commerceCommandID)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(commerceCommandID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(commerceCommandID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: changes
func (_m *CommerceCommandsService) Update(changes *commands.CommerceCommand) error {
	ret := _m.Called(changes)

	var r0 error
	if rf, ok := ret.Get(0).(func(*commands.CommerceCommand) error); ok {
		r0 = rf(changes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCommerceCommandsService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommerceCommandsService creates a new instance of CommerceCommandsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommerceCommandsService(t mockConstructorTestingTNewCommerceCommandsService) *CommerceCommandsService {
	mock := &CommerceCommandsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
