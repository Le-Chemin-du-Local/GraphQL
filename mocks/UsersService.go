// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "chemin-du-local.bzh/graphql/graph/model"
	mock "github.com/stretchr/testify/mock"

	users "chemin-du-local.bzh/graphql/internal/users"
)

// UsersService is an autogenerated mock type for the UsersService type
type UsersService struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: login
func (_m *UsersService) Authenticate(login model.Login) bool {
	ret := _m.Called(login)

	var r0 bool
	if rf, ok := ret.Get(0).(func(model.Login) bool); ok {
		r0 = rf(login)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Create provides a mock function with given fields: input
func (_m *UsersService) Create(input model.NewUser) (*users.User, error) {
	ret := _m.Called(input)

	var r0 *users.User
	if rf, ok := ret.Get(0).(func(model.NewUser) *users.User); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.NewUser) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUser provides a mock function with given fields:
func (_m *UsersService) GetAllUser() ([]users.User, error) {
	ret := _m.Called()

	var r0 []users.User
	if rf, ok := ret.Get(0).(func() []users.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFiltered provides a mock function with given fields: filter
func (_m *UsersService) GetFiltered(filter interface{}) ([]users.User, error) {
	ret := _m.Called(filter)

	var r0 []users.User
	if rf, ok := ret.Get(0).(func(interface{}) []users.User); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *UsersService) GetUserByEmail(email string) (*users.User, error) {
	ret := _m.Called(email)

	var r0 *users.User
	if rf, ok := ret.Get(0).(func(string) *users.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: id
func (_m *UsersService) GetUserById(id string) (*users.User, error) {
	ret := _m.Called(id)

	var r0 *users.User
	if rf, ok := ret.Get(0).(func(string) *users.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: changes
func (_m *UsersService) Update(changes *users.User) error {
	ret := _m.Called(changes)

	var r0 error
	if rf, ok := ret.Get(0).(func(*users.User) error); ok {
		r0 = rf(changes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUsersService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsersService creates a new instance of UsersService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsersService(t mockConstructorTestingTNewUsersService) *UsersService {
	mock := &UsersService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
