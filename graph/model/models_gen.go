// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CommerceConnection struct {
	Edges    []*CommerceEdge   `json:"edges"`
	PageInfo *CommercePageInfo `json:"pageInfo"`
}

type CommerceEdge struct {
	Cursor string    `json:"cursor"`
	Node   *Commerce `json:"node"`
}

type CommercePageInfo struct {
	StartCursor string `json:"startCursor"`
	EndCursor   string `json:"endCursor"`
	HasNextPage bool   `json:"hasNextPage"`
}

type Filter struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type Login struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type NewCommerce struct {
	Name            string `json:"name"`
	Description     string `json:"description"`
	StorekeeperWord string `json:"storekeeperWord"`
	Address         string `json:"address"`
	Phone           string `json:"phone"`
	Email           string `json:"email"`
}

type NewProduct struct {
	CommerceID  *string  `json:"commerceID"`
	Name        string   `json:"name"`
	Description string   `json:"description"`
	Price       float64  `json:"price"`
	Unit        string   `json:"unit"`
	IsBreton    bool     `json:"isBreton"`
	Tags        []string `json:"tags"`
	Categories  []string `json:"categories"`
}

type NewUser struct {
	Email     string  `json:"email"`
	Password  string  `json:"password"`
	FirstName *string `json:"firstName"`
	LastName  *string `json:"lastName"`
}

type Product struct {
	ID          string   `json:"id"`
	Name        string   `json:"name"`
	Description string   `json:"description"`
	Price       float64  `json:"price"`
	Unit        string   `json:"unit"`
	IsBreton    bool     `json:"isBreton"`
	Tags        []string `json:"tags"`
	Categories  []string `json:"categories"`
}

type ProductConnection struct {
	Edges    []*ProductEdge   `json:"edges"`
	PageInfo *ProductPageInfo `json:"pageInfo"`
}

type ProductEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Product `json:"node"`
}

type ProductFilter struct {
	Category *string `json:"category"`
}

type ProductPageInfo struct {
	StartCursor string `json:"startCursor"`
	EndCursor   string `json:"endCursor"`
	HasNextPage bool   `json:"hasNextPage"`
}

type Role string

const (
	RoleAdmin       Role = "ADMIN"
	RoleStorekeeper Role = "STOREKEEPER"
	RoleUser        Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleStorekeeper,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleStorekeeper, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
