type Query {
  # UTILISATEURS
  users: [User!]!
  user(id: ID): User!

  # COMMERCES
  commerces(first: Int = 5, after: String, filter: CommerceFilter): CommerceConnection! 
  commerce(id: ID): Commerce
  product(id: ID!): Product!

  # SERVICES
  commands(first: Int = 5, after: ID, filter: CommandsFilter): CommandConnection! @needAuthentication
  commerceCommands(first: Int = 5, after: ID, filter: CommerceCommandsFilter): CommerceCommandConnection! @needAuthentication

  command(id: ID!): Command! @needAuthentication

  allServicesInfo: [ServiceInfo!]!
  serviceInfo(id: String!): ServiceInfo!

  # PANIERS
  panier(id: ID!): Panier!
}

type Mutation {
  # UTILISATEURS
  createUser(input: NewUser!): User!
  login(input: Login!): String!
  updateUser(id: ID, input: ChangesUser): User! @needAuthentication

  # COMMERCES
  createCommerce(userID: ID!, input: NewCommerce!): Commerce! 
  updateCommerce(id: ID!, changes: ChangesCommerce!): Commerce! @hasRole(role: STOREKEEPER)
  createProduct(commerceID: ID, input: NewProduct!): Product! @hasRole(role: STOREKEEPER)
  createProducts(commerceID: ID, input: [NewProduct!]!): [Product!]! @hasRole(role: STOREKEEPER)
  updateProduct(id: ID!, changes: ChangesProduct!): Product! @hasRole(role: STOREKEEPER)
  updateProducts(changes: [BulkChangesProduct!]!): [Product!]! @hasRole(role: STOREKEEPER)

  # SERVICES
  updateCommerceCommand(id: ID!, changes: ChangesCommerceCommand!): CommerceCommand! @needAuthentication

  # PANIER
  createPanier(commerceID: ID, input: NewPanier!): Panier! @hasRole(role: STOREKEEPER)
  updatePanier(id: ID! changes: ChangesPanier!): Panier! @hasRole(role: STOREKEEPER)
}
