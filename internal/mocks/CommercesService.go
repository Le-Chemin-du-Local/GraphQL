// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	commerces "chemin-du-local.bzh/graphql/internal/commerces"
	graphql "github.com/99designs/gqlgen/graphql"

	mock "github.com/stretchr/testify/mock"

	model "chemin-du-local.bzh/graphql/graph/model"

	options "go.mongodb.org/mongo-driver/mongo/options"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// CommercesService is an autogenerated mock type for the CommercesService type
type CommercesService struct {
	mock.Mock
}

// Create provides a mock function with given fields: input, storekeeperID
func (_m *CommercesService) Create(input model.NewCommerce, storekeeperID primitive.ObjectID) (*commerces.Commerce, error) {
	ret := _m.Called(input, storekeeperID)

	var r0 *commerces.Commerce
	if rf, ok := ret.Get(0).(func(model.NewCommerce, primitive.ObjectID) *commerces.Commerce); ok {
		r0 = rf(input, storekeeperID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commerces.Commerce)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.NewCommerce, primitive.ObjectID) error); ok {
		r1 = rf(input, storekeeperID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *CommercesService) GetAll() ([]commerces.Commerce, error) {
	ret := _m.Called()

	var r0 []commerces.Commerce
	if rf, ok := ret.Get(0).(func() []commerces.Commerce); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]commerces.Commerce)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *CommercesService) GetById(id string) (*commerces.Commerce, error) {
	ret := _m.Called(id)

	var r0 *commerces.Commerce
	if rf, ok := ret.Get(0).(func(string) *commerces.Commerce); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commerces.Commerce)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFiltered provides a mock function with given fields: filter, opts
func (_m *CommercesService) GetFiltered(filter interface{}, opts *options.FindOptions) ([]commerces.Commerce, error) {
	ret := _m.Called(filter, opts)

	var r0 []commerces.Commerce
	if rf, ok := ret.Get(0).(func(interface{}, *options.FindOptions) []commerces.Commerce); ok {
		r0 = rf(filter, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]commerces.Commerce)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, *options.FindOptions) error); ok {
		r1 = rf(filter, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetForUser provides a mock function with given fields: userID
func (_m *CommercesService) GetForUser(userID string) (*commerces.Commerce, error) {
	ret := _m.Called(userID)

	var r0 *commerces.Commerce
	if rf, ok := ret.Get(0).(func(string) *commerces.Commerce); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commerces.Commerce)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginated provides a mock function with given fields: startValue, first, filter
func (_m *CommercesService) GetPaginated(startValue *string, first int, filter *model.CommerceFilter) ([]commerces.Commerce, int, error) {
	ret := _m.Called(startValue, first, filter)

	var r0 []commerces.Commerce
	if rf, ok := ret.Get(0).(func(*string, int, *model.CommerceFilter) []commerces.Commerce); ok {
		r0 = rf(startValue, first, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]commerces.Commerce)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*string, int, *model.CommerceFilter) int); ok {
		r1 = rf(startValue, first, filter)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*string, int, *model.CommerceFilter) error); ok {
		r2 = rf(startValue, first, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: changes, image, profilePicture
func (_m *CommercesService) Update(changes *commerces.Commerce, image *graphql.Upload, profilePicture *graphql.Upload) error {
	ret := _m.Called(changes, image, profilePicture)

	var r0 error
	if rf, ok := ret.Get(0).(func(*commerces.Commerce, *graphql.Upload, *graphql.Upload) error); ok {
		r0 = rf(changes, image, profilePicture)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBalancesForOrder provides a mock function with given fields: commerceID, price, priceClickAndCollect, pricePaniers
func (_m *CommercesService) UpdateBalancesForOrder(commerceID string, price int, priceClickAndCollect float64, pricePaniers float64) error {
	ret := _m.Called(commerceID, price, priceClickAndCollect, pricePaniers)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int, float64, float64) error); ok {
		r0 = rf(commerceID, price, priceClickAndCollect, pricePaniers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCommercesService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommercesService creates a new instance of CommercesService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommercesService(t mockConstructorTestingTNewCommercesService) *CommercesService {
	mock := &CommercesService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
